435. Non-overlapping Intervals

Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note:
You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.
Example 1:
Input: [ [1,2], [2,3], [3,4], [1,3] ]

Output: 1

Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
Example 2:
Input: [ [1,2], [1,2], [1,2] ]

Output: 2

Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.


class Solution:
    def eraseOverlapIntervals(self, intervals: List[Interval]) -> int:
        
        intervals=sorted(intervals,key=lambda x:x.end)#NB
        
        
        cur_end=float('-inf')
        count=0
        for i in range(len(intervals)):
            if cur_end>intervals[i].start:
                # intervals.pop(i)# 说明for循环并不会每次都重新计算一次len(intervals)
                count+=1# 这里指删后面的，可以保留更多，靠想象吧
            else:
                cur_end=intervals[i].end
                
        return count
