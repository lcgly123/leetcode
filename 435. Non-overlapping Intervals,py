435. Non-overlapping Intervals

Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note:
You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.
Example 1:
Input: [ [1,2], [2,3], [3,4], [1,3] ]

Output: 1

Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
Example 2:
Input: [ [1,2], [1,2], [1,2] ]

Output: 2

Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.


class Solution:
    def eraseOverlapIntervals(self, intervals: List[Interval]) -> int:
        inter=sorted(intervals,key=lambda x:x[1])
        
        l=0
        count=0
        if len(inter)==0:
            return 0
        for r in range(1,len(inter)):
            if inter[r][0]<inter[l][1]:
                count+=1
            else:
                l=r
        return count
        
        

        
#         # 只有两种可能，重合和覆盖，重合的话删哪个都一样，覆盖的话删end靠后的才能留下更多
#         intervals=sorted(intervals,key=lambda x:x[0])
        
        
#         cur_end=float('-inf')
#         count=0
#         for i in range(len(intervals)):
#             if cur_end>intervals[i][0]:
#                 # intervals.pop(i)# 说明for循环并不会每次都重新计算一次len(intervals)
#                 count+=1
#             else:
#                 cur_end=intervals[i][1]
                
#         return count
