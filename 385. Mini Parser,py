385. Mini Parser

Given a nested list of integers represented as a string, implement a parser to deserialize it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Note: You may assume that the string is well-formed:

String is non-empty.
String does not contain white spaces.
String contains only digits 0-9, [, - ,, ].
Example 1:

Given s = "324",

You should return a NestedInteger object which contains a single integer 324.
Example 2:

Given s = "[123,[456,[789]]]",

Return a NestedInteger object containing a nested list with 2 elements:

1. An integer containing value 123.
2. A nested list containing two elements:
    i.  An integer containing value 456.
    ii. A nested list with one element:
         a. An integer containing value 789.
         


# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def __init__(self, value=None):
#        """
#        If value is not specified, initializes an empty list.
#        Otherwise initializes a single integer equal to value.
#        """
#
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def add(self, elem):
#        """
#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.
#        :rtype void
#        """
#
#    def setInteger(self, value):
#        """
#        Set this NestedInteger to hold a single integer equal to value.
#        :rtype void
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """

class Solution:
    def deserialize(self, s: str) -> NestedInteger:
        # 虽然自己写的，也觉得很NB
        num=''
        stack=[]
 
        for i in s+' ':#就是为了应对全数字情况
            if i=='[':
                new=NestedInteger()
                stack.append(new)# 默认建一个list
            elif i in '-0987654321':
                num+=i
            elif num!='':#有顺序的
                num_in=NestedInteger(int(num))
                if stack!=[]:
                    stack[-1].add(num_in)
                    num=''
                else:
                    stack.append(num_in)
                    
            if i==']':# 顺序很重要
                if len(stack)!=1:
                    nest=stack.pop()
                    stack[-1].add(nest)
            
        return stack[-1]
                
        
        
        
        
        
        
        
#         #NB
#         def dfs(s,ind):
#             i=ind
#             if s[i]=='[':# 第一个是【
#                 parse=NestedInteger()
#                 i+=1
                
#                 while(i<len(s)):
#                     if s[i]=='[':
#                         nest,i=dfs(s,i)
#                         parse.add(nest)
#                     elif s[i]==']':
#                         return parse,i+1
#                     elif s[i] in '-0987654321':
#                         num,i=dfs(s,i)
#                         parse.add(num)
#                     else:
#                         i+=1# 逗号都在这被过掉了，实际上这里第一层循环会执行到结束
#             else:#第一个是数字
#                 temp=i
#                 while i<len(s) and s[i] in '-0987654321':
#                     i+=1
#                 return NestedInteger(int(s[temp:i])),i# 返回的永远是Nestlist
            
#         res,_=dfs(s,0)
#         return res
                    
                    
        
